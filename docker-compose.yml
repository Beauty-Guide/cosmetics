version: "3.8"

services:
  cosmetic-backend:
    container_name: cosmetic-backend
    image: cosmetic-backend-image
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://dbpostgresql:5432/cowboo
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
    #      SPRING_JPA_HIBERNATE_DDL_AUTO: validate
    #      SPRING_LIQUIBASE_ENABLED: "true"
    #      SPRING_LIQUIBASE_CHANGELOG: classpath:db/changelog/db.changelog-master.yaml
    #    restart: on-failure:5
    networks:
      - my-network
    depends_on:
      - postgres

  postgres:
    image: postgres:17
    ports:
      - "5432:5432"
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
      POSTGRES_DB: cowboo
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - my-network

  cosmetic-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: cosmetic-frontend
    ports:
      - "80:80"
    restart: unless-stopped
    volumes:
      - ./frontend:/app
      - node_modules:/app/node_modules
    environment:
      - CHOKIDAR_USEPOLLING=true
      - NODE_ENV=production
    networks:
      - my-network

  cosmetic-minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio_data:/data
    command: ["server", "/data", "--console-address", ":9001"]
    networks:
      - my-network

  create-bucket:
    image: quay.io/minio/mc
    container_name: create-bucket
    depends_on:
      - cosmetic-minio
    networks:
      - my-network
    entrypoint: >
      /bin/sh -c "
      sleep 5 &&
      mc alias set minio http://cosmetic-minio:9000 minioadmin minioadmin &&
      if ! mc ls minio/cosmetics > /dev/null 2>&1; then
        echo 'Бакет не найден. Создаю бакет \"cosmetics\"...' &&
        mc mb minio/cosmetics &&
        mc anonymous set public minio/cosmetics &&
        echo 'Bucket \"cosmetics\" успешно создан и сделан публичным';
      else
        echo 'Bucket \"cosmetics\" уже существует';
      fi;
      "

# Объявляем именованный том здесь ↓↓↓
volumes:
  postgres_data:
  minio_data:
  node_modules:

networks:
  my-network:
